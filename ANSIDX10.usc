start ANSIDX10(ansival,ansirec,ansifld,ansitest,ansicl,ansicon,ansiprov)
 %VERSION 1.0.000 09/17/2015
 'Author:  R. Whaite, Helen Farbaee Centers
 
'Changes:

'	R. Whaite:  8/14/2015 Added logic to return BK (ICD-9) or ABK (ICD-10) as the code list qualifier.  Parm file needs to provide the ISN-ID (7100)
'             from the event in Record Type 102 Field 013.

 'Dependencies
 
 '1.	Recode Table RU2DXTYP - This recode table recodes the RU to either MH, SA or IDD (and optionally "PH" - Physical Health).  
 '		This value is used by the script to determien what type of DX needs to be selected by the script and handed back to the ANSIP 
 '		process.
 
 '2.	Libraries and Functions
 '		a.	the GetClientDX function lib_DX10 is used and returns arrays containing the dx_type, icd9_code, icd10_code
 
 '3.	Bill Parm Requirements and Examples.
 '		a.	Record 102 and Field 001 and 013 must BOTH reference the ISN ID DST (7100) and have US=ANSIDX10 beginning in postion 54
 '		b.	Examples of Record 102 Fields 001 and 013 are below. 
 
'102 013 07100                                        US=ANSIDX10 DX Codeset
'102 001 07100                                        US=ANSIDX10 DX Code        
 
 'ToDo:
 
 '1.	Do we want to provide options for recoding event FS and event SAC to MH, SA or IDD?  Should be easy enough to do if 
 '    this functinality is desired.

%include inc_DX10

'ANSIP Vars
ansival  is x
ansirec  is x
ansifld  is x
ansitest is x
ansicl   is x
ansicon  is x
ansiprov is x

'Logging and Trace - Typically needed for testing.  Comment out the lines setting the value for logfile and/or tracefile when no longer needed.  
'								Filesystem location and filename will need to be
'               Specific per Center.  Note, for tracing to provide useful feedback while testing, the ANSI process should only be 
'								run for one client and one event at a time.  Otherwise the trace file keeps over-writing itself.  However, the 
'								logfile will record the action on each event put into the ANSI Process

|         is x   | = "|"
ansiorig  is x

logfile   is x  
logstring is x
'logfile = "/c4/EXPORT2/whaiter/ANSIDX10.LOG"

tracefile is x
'tracefile = "/c4/EXPORT2/whaiter/ANSIDX10.TXT"

if tracefile dp
	$trace("path.on", tracefile)
endif

'Processing Vars
rc       is b
'***************************************************************************************************************************
dx10date is d dx10date = 10/01/2015		'*******Change to 10/01/2015 for production.  Any other date is ONLY for testing******.
'***************************************************************************************************************************
rtdxtype	is x
icd_ver	  is x
usedx     is x
rurecode  is x  rurecode = "RU2DXTYP"  'Change to match your RU to DX Type Recode

'ISN DST's & Vars
$$isn.id			is x	
$$isn.clid 		is x
$$isn.dt			is d
$$isn.sac			is b
$$isn.ru			is b
$$isn.fs			is b

ansiorig = ansival			'Grab the original ansival value and keep it for comparison purposes.  Should be the ISN ID for the event

$allowupdate(ansival)
$silent(ansival)

'Identify the Record and Field from the ANSI parm
if    ansirec = "102" and (ansifld = "001" or ansifld = "013")

'Get the details of the event from the ISN ID associaed witht he event.
rc = $dbread(09,ansiorig,$$isn.clid,$$isn.dt,$$isn.sac,$$isn.ru,$$isn.fs)

	rtdxtype = $rt($$isn.ru,rurecode,"R")					'Get the DX Type (MH, IDD, SA) by looking by recoding event RU

	if $$isn.dt < dx10date													'Determine if where we should get the DX (ICD-9 or ICD-10 record and if we should return
		icd_ver = "9"																'the ICD-9 value (before ICD-10 date) or the ICD-10 Value
	else
		icd_ver = "10"
	endif

	if ansifld = "013"														'This will handle sending BK for ICD-9 and ABK for ICD-10 when called from field 13 (record 102)
		select icd_ver
			case "9"
				ansival = "BK"
			case "10" 
				ansival = "ABK"
		endselect	
	
	else

		if 			icd_ver = "10"
			usedx = {"lib_DX10"}getDXfrom10($$isn.clid,icd_ver,rtdxtype)
		elseif 	{"lib_DX10"}icd10recavail($$isn.clid) = "Y" and icd_ver = "9"
			usedx = {"lib_DX10"}getDXfrom10($$isn.clid,icd_ver,rtdxtype)
		else
			usedx = "R69"
		endif

		ansival = usedx
	
	endif
endif

if logfile dp
	logstring = "ENTITY" + | + rc + | + ansiorig + | + ansirec + | + ansifld + | + ansicl + | + ansicon + | + ansival
	$log(logstring,logfile)
endif

end ANSIDX10


